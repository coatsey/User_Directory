{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","userArray","setUserArray","natArray","setNatArray","filteredArray","setFilteredArray","useEffect","axios","get","then","response","sortedArray","data","results","sort","a","b","name","first","localeCompare","natsArray","Array","from","Set","map","x","nat","catch","err","console","log","className","aria-label","onChange","e","target","value","employeeFilteredArray","filter","element","defaultValue","result","index","scope","last","email","login","uuid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAwFeA,MApFf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAERC,EAFQ,KAEGC,EAFH,OAIiBF,mBAAS,IAJ1B,mBAIRG,EAJQ,KAIEC,EAJF,OAM2BJ,mBAAS,IANpC,mBAMRK,EANQ,KAMOC,EANP,KAyCb,OAjCFC,qBAAU,WACRC,IACGC,IAAI,yCACJC,MAAK,SAACC,GACL,IACMC,EADgBD,EAASE,KAAKC,QACFC,MAAK,SAACC,EAAGC,GAAJ,OACrCD,EAAEE,KAAKC,MAAMC,cAAcH,EAAEC,KAAKC,UAEpCjB,EAAaU,GACbN,EAAiBM,GAEjB,IAAMS,EAAYC,MAAMC,KACtB,IAAIC,IAAIZ,EAAYa,KAAI,SAACC,GAAD,OAAOA,EAAEC,SACjCZ,OAEFX,EAAYiB,MAEbO,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAgBC,sBAAKG,UAAU,MAAf,UACE,iCACE,sDAEF,yBACEA,UAAU,cACVC,aAAW,yBACXC,SArBR,SAA0BC,GACxB,OAAQA,EAAEC,OAAOC,OACf,IAAK,iBACH/B,EAAiBL,GACjB,MACF,QAEE,IAAMqC,EAAwBrC,EAAUsC,QAAO,SAACC,GAC9C,OAAOL,EAAEC,OAAOC,QAAUG,EAAQb,OAEpCrB,EAAiBgC,KAQjB,UAKE,wBAAQG,cAAY,EAApB,4BACCtC,EAASsB,KAAI,SAACiB,EAAQC,GAAT,OACZ,wBAAoBN,MAAOK,EAA3B,SACGA,GADUC,SAKjB,qBAAKX,UAAU,eAAf,SACE,wBAAOA,UAAU,sBAAjB,UACE,gCACE,+BACE,oBAAIY,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,+BAGJ,gCACGvC,EAAcoB,KAAI,SAACiB,GAAD,OACjB,+BACE,6BAAKA,EAAOxB,KAAKC,QACjB,6BAAKuB,EAAOxB,KAAK2B,OACjB,6BAAKH,EAAOI,QACZ,6BAAKJ,EAAOf,QAJLe,EAAOK,MAAMC,oBC9DrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.234605ee.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n\nconst [userArray, setUserArray] = useState([]);\n\nconst [natArray, setNatArray] = useState([]);\n\nconst [filteredArray, setFilteredArray] = useState([]);\n\nuseEffect(() => {\n  axios\n    .get(\"https://randomuser.me/api/?results=25\")\n    .then((response) => {\n      const responseArray = response.data.results;\n      const sortedArray = responseArray.sort((a, b) =>\n        a.name.first.localeCompare(b.name.first)\n      );\n      setUserArray(sortedArray);\n      setFilteredArray(sortedArray);\n\n      const natsArray = Array.from(\n        new Set(sortedArray.map((x) => x.nat))\n      ).sort();\n\n      setNatArray(natsArray);\n    })\n    .catch((err) => console.log(err));\n}, []);\n\nfunction handleListChange(e) {\n  switch (e.target.value) {\n    case \"Select Country\":\n      setFilteredArray(userArray);\n      break;\n    default:\n      // filters displayed array by user nationality\n      const employeeFilteredArray = userArray.filter((element) => {\n        return e.target.value === element.nat;\n      });\n      setFilteredArray(employeeFilteredArray);\n  }\n}\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Employee Directory</h1>\n      </header>\n      <select\n        className=\"form-select\"\n        aria-label=\"Default select example\"\n        onChange={handleListChange}\n      >\n        <option defaultValue>Select Country</option>\n        {natArray.map((result, index) => (\n          <option key={index} value={result}>\n            {result}\n          </option>\n        ))}\n      </select>\n      <div className=\"container-sm\">\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">last</th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\"> Nationality</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredArray.map((result) => (\n              <tr key={result.login.uuid}>\n                <td>{result.name.first}</td>\n                <td>{result.name.last}</td>\n                <td>{result.email}</td>\n                <td>{result.nat}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}